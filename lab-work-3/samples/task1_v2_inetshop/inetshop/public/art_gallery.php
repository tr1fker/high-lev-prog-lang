<?php

// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã –±–µ–∑ namespace –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
abstract class Artwork {
    protected string $title;
    protected string $author;
    protected int $year;
    protected float $baseValue;

    public function __construct(string $title, string $author, int $year, float $baseValue) {
        $this->title = $title;
        $this->author = $author;
        $this->year = $year;
        $this->baseValue = $baseValue;
    }

    abstract public function display(): string;
    abstract public function appraiseValue(): float;

    public function getAuthor(): string {
        return $this->author;
    }

    public function getYear(): int {
        return $this->year;
    }

    public function info(): string {
        return "{$this->title} ({$this->author}, {$this->year}) - –û—Ü–µ–Ω–∫–∞: " .
            number_format($this->appraiseValue(), 2, '.', ' ') . " —Ä—É–±.";
    }

    public function getTitle(): string {
        return $this->title;
    }

    public function getBaseValue(): float {
        return $this->baseValue;
    }
}

class Painting extends Artwork {
    private string $style;
    private string $medium;
    private float $conditionMultiplier;

    public function __construct(string $title, string $author, int $year, float $baseValue,
                                string $style, string $medium, float $conditionMultiplier = 1.0) {
        parent::__construct($title, $author, $year, $baseValue);
        $this->style = $style;
        $this->medium = $medium;
        $this->conditionMultiplier = max(0.1, min(2.0, $conditionMultiplier));
    }

    public function display(): string {
        return "–ö–∞—Ä—Ç–∏–Ω–∞: {$this->title}\n" .
            "–°—Ç–∏–ª—å: {$this->style}, –¢–µ—Ö–Ω–∏–∫–∞: {$this->medium}\n" .
            "–°–æ—Å—Ç–æ—è–Ω–∏–µ: " . ($this->conditionMultiplier > 1 ? '–û—Ç–ª–∏—á–Ω–æ–µ' :
                ($this->conditionMultiplier < 1 ? '–ü–ª–æ—Ö–æ–µ' : '–•–æ—Ä–æ—à–µ–µ'));
    }

    public function appraiseValue(): float {
        $ageMultiplier = max(1.0, (date('Y') - $this->year) * 0.05);
        $styleMultiplier = $this->getStyleMultiplier();

        return $this->baseValue * $ageMultiplier * $styleMultiplier * $this->conditionMultiplier;
    }

    private function getStyleMultiplier(): float {
        return match($this->style) {
            '–∏–º–ø—Ä–µ—Å—Å–∏–æ–Ω–∏–∑–º' => 2.5,
            '—Ä–µ–∞–ª–∏–∑–º' => 1.8,
            '–∞–±—Å—Ç—Ä–∞–∫—Ü–∏–æ–Ω–∏–∑–º' => 1.5,
            '—Å—é—Ä—Ä–µ–∞–ª–∏–∑–º' => 2.0,
            default => 1.2
        };
    }

    public function getStyle(): string {
        return $this->style;
    }

    public function getMedium(): string {
        return $this->medium;
    }
}

class Sculpture extends Artwork {
    private string $material;
    private float $weight;
    private string $condition;

    public function __construct(string $title, string $author, int $year, float $baseValue,
                                string $material, float $weight, string $condition = '—Ö–æ—Ä–æ—à–µ–µ') {
        parent::__construct($title, $author, $year, $baseValue);
        $this->material = $material;
        $this->weight = $weight;
        $this->condition = $condition;
    }

    public function display(): string {
        return "–°–∫—É–ª—å–ø—Ç—É—Ä–∞: {$this->title}\n" .
            "–ú–∞—Ç–µ—Ä–∏–∞–ª: {$this->material}, –í–µ—Å: {$this->weight} –∫–≥\n" .
            "–°–æ—Å—Ç–æ—è–Ω–∏–µ: {$this->condition}";
    }

    public function appraiseValue(): float {
        $materialMultiplier = $this->getMaterialMultiplier();
        $weightMultiplier = min(3.0, $this->weight * 0.1);
        $conditionMultiplier = $this->getConditionMultiplier();
        $ageMultiplier = max(1.0, (date('Y') - $this->year) * 0.03);

        return $this->baseValue * $materialMultiplier * $weightMultiplier * $conditionMultiplier * $ageMultiplier;
    }

    private function getMaterialMultiplier(): float {
        return match($this->material) {
            '–±—Ä–æ–Ω–∑–∞' => 2.5,
            '–º—Ä–∞–º–æ—Ä' => 3.0,
            '–¥–µ—Ä–µ–≤–æ' => 1.5,
            '–≥–ª–∏–Ω–∞' => 1.2,
            default => 1.0
        };
    }

    private function getConditionMultiplier(): float {
        return match($this->condition) {
            '–æ—Ç–ª–∏—á–Ω–æ–µ' => 1.5,
            '—Ö–æ—Ä–æ—à–µ–µ' => 1.0,
            '—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ' => 0.7,
            '–ø–ª–æ—Ö–æ–µ' => 0.3,
            default => 0.5
        };
    }

    public function getMaterial(): string {
        return $this->material;
    }

    public function getWeight(): float {
        return $this->weight;
    }
}

class DigitalArt extends Artwork {
    private string $format;
    private int $resolution;
    private bool $isLimitedEdition;
    private int $editionNumber;

    public function __construct(string $title, string $author, int $year, float $baseValue,
                                string $format, int $resolution, bool $isLimitedEdition = false,
                                int $editionNumber = 1) {
        parent::__construct($title, $author, $year, $baseValue);
        $this->format = $format;
        $this->resolution = $resolution;
        $this->isLimitedEdition = $isLimitedEdition;
        $this->editionNumber = $editionNumber;
    }

    public function display(): string {
        $editionInfo = $this->isLimitedEdition ?
            "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —Å–µ—Ä–∏—è ‚Ññ{$this->editionNumber}" : "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π";

        return "–¶–∏—Ñ—Ä–æ–≤–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ: {$this->title}\n" .
            "–§–æ—Ä–º–∞—Ç: {$this->format}, –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {$this->resolution}p\n" .
            "–¢–∏–ø: {$editionInfo}";
    }

    public function appraiseValue(): float {
        $resolutionMultiplier = min(2.0, $this->resolution / 1000);
        $editionMultiplier = $this->isLimitedEdition ? 2.0 : 0.5;
        $formatMultiplier = $this->getFormatMultiplier();
        $noveltyMultiplier = max(0.5, 2.0 - (date('Y') - $this->year) * 0.1);

        return $this->baseValue * $resolutionMultiplier * $editionMultiplier * $formatMultiplier * $noveltyMultiplier;
    }

    private function getFormatMultiplier(): float {
        return match($this->format) {
            '4K' => 1.8,
            '2K' => 1.5,
            'Full HD' => 1.2,
            'HD' => 1.0,
            default => 0.8
        };
    }

    public function getFormat(): string {
        return $this->format;
    }

    public function getResolution(): int {
        return $this->resolution;
    }

    public function isLimitedEdition(): bool {
        return $this->isLimitedEdition;
    }
}

// –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π
$artCollection = [
    new Painting("–ó–≤–µ–∑–¥–Ω–∞—è –Ω–æ—á—å", "–í–∏–Ω—Å–µ–Ω—Ç –í–∞–Ω –ì–æ–≥", 1889, 50000000, "–ø–æ—Å—Ç–∏–º–ø—Ä–µ—Å—Å–∏–æ–Ω–∏–∑–º", "–º–∞—Å–ª–æ", 1.2),
    new Painting("–ö—Ä–∏–∫", "–≠–¥–≤–∞—Ä–¥ –ú—É–Ω–∫", 1893, 45000000, "—ç–∫—Å–ø—Ä–µ—Å—Å–∏–æ–Ω–∏–∑–º", "–º–∞—Å–ª–æ, —Ç–µ–º–ø–µ—Ä–∞", 0.9),
    new Sculpture("–î–∞–≤–∏–¥", "–ú–∏–∫–µ–ª–∞–Ω–¥–∂–µ–ª–æ", 1504, 80000000, "–º—Ä–∞–º–æ—Ä", 5600, "–æ—Ç–ª–∏—á–Ω–æ–µ"),
    new Sculpture("–ú—ã—Å–ª–∏—Ç–µ–ª—å", "–û–≥—é—Å—Ç –†–æ–¥–µ–Ω", 1902, 35000000, "–±—Ä–æ–Ω–∑–∞", 180, "—Ö–æ—Ä–æ—à–µ–µ"),
    new DigitalArt("–ö–∞–∂–¥—ã–π –¥–µ–Ω—å: –ø–µ—Ä–≤—ã–µ 5000 –¥–Ω–µ–π", "–ë–∏–ø–ª", 2021, 1000000, "4K", 4096, true, 1),
    new DigitalArt("–¶–∏—Ñ—Ä–æ–≤–∞—è –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è", "–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤", 2023, 50000, "2K", 2048, false)
];
?>

<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>–ì–∞–ª–µ—Ä–µ—è –∏—Å–∫—É—Å—Å—Ç–≤</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background: #f5f5f5;
        }
        .art-gallery {
            max-width: 1200px;
            margin: 0 auto;
        }
        .artwork {
            background: white;
            margin: 15px 0;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .painting { border-left: 5px solid #e74c3c; }
        .sculpture { border-left: 5px solid #3498db; }
        .digital { border-left: 5px solid #2ecc71; }
        h2 { color: #2c3e50; margin-top: 0; }
        .details {
            background: #ecf0f1;
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
        }
        .value {
            font-weight: bold;
            color: #e74c3c;
            font-size: 1.2em;
        }
        .type {
            display: inline-block;
            padding: 3px 8px;
            border-radius: 3px;
            color: white;
            font-size: 0.8em;
        }
        .type-painting { background: #e74c3c; }
        .type-sculpture { background: #3498db; }
        .type-digital { background: #2ecc71; }
    </style>
</head>
<body>
<div class="art-gallery">
    <h1>üé® –ì–∞–ª–µ—Ä–µ—è –∏—Å–∫—É—Å—Å—Ç–≤</h1>
    <p>–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: Artwork ‚Üí Painting, Sculpture, DigitalArt</p>

    <?php foreach ($artCollection as $art): ?>
        <div class="artwork <?= get_class($art) === 'Painting' ? 'painting' :
            (get_class($art) === 'Sculpture' ? 'sculpture' : 'digital') ?>">

            <?php
            $typeClass = match(get_class($art)) {
                'Painting' => 'type-painting',
                'Sculpture' => 'type-sculpture',
                'DigitalArt' => 'type-digital'
            };
            $typeName = match(get_class($art)) {
                'Painting' => '–ö–∞—Ä—Ç–∏–Ω–∞',
                'Sculpture' => '–°–∫—É–ª—å–ø—Ç—É—Ä–∞',
                'DigitalArt' => '–¶–∏—Ñ—Ä–æ–≤–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ'
            };
            ?>

            <span class="type <?= $typeClass ?>"><?= $typeName ?></span>
            <h2><?= htmlspecialchars($art->getTitle()) ?></h2>

            <div class="details">
                <strong>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</strong><br>
                <?= nl2br(htmlspecialchars($art->display())) ?>
            </div>

            <div>
                <strong>–ê–≤—Ç–æ—Ä:</strong> <?= htmlspecialchars($art->getAuthor()) ?><br>
                <strong>–ì–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è:</strong> <?= $art->getYear() ?><br>
                <strong>–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</strong> <?= number_format($art->getBaseValue(), 2, '.', ' ') ?> —Ä—É–±.<br>
                <strong>–¢–µ–∫—É—â–∞—è –æ—Ü–µ–Ω–∫–∞:</strong> <span class="value"><?= number_format($art->appraiseValue(), 2, '.', ' ') ?> —Ä—É–±.</span>
            </div>

            <div style="margin-top: 10px; font-style: italic;">
                <strong>–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</strong> <?= htmlspecialchars($art->info()) ?>
            </div>

            <?php if (method_exists($art, 'getStyle')): ?>
                <div><small>–°—Ç–∏–ª—å: <?= htmlspecialchars($art->getStyle()) ?></small></div>
            <?php endif; ?>

            <?php if (method_exists($art, 'getMaterial')): ?>
                <div><small>–ú–∞—Ç–µ—Ä–∏–∞–ª: <?= htmlspecialchars($art->getMaterial()) ?></small></div>
            <?php endif; ?>

            <?php if (method_exists($art, 'getFormat')): ?>
                <div><small>–§–æ—Ä–º–∞—Ç: <?= htmlspecialchars($art->getFormat()) ?></small></div>
            <?php endif; ?>
        </div>
    <?php endforeach; ?>

    <div style="margin-top: 30px; padding: 20px; background: #34495e; color: white; border-radius: 10px;">
        <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏</h3>
        <?php
        $totalValue = array_reduce($artCollection, fn($sum, $art) => $sum + $art->appraiseValue(), 0);
        $averageValue = $totalValue / count($artCollection);
        $mostValuable = array_reduce($artCollection, fn($max, $art) =>
        $art->appraiseValue() > $max->appraiseValue() ? $art : $max, $artCollection[0]);
        ?>
        <p><strong>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–∏:</strong> <?= number_format($totalValue, 2, '.', ' ') ?> —Ä—É–±.</p>
        <p><strong>–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:</strong> <?= number_format($averageValue, 2, '.', ' ') ?> —Ä—É–±.</p>
        <p><strong>–°–∞–º–æ–µ —Ü–µ–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ:</strong> "<?= htmlspecialchars($mostValuable->getTitle()) ?>"
            (<?= number_format($mostValuable->appraiseValue(), 2, '.', ' ') ?> —Ä—É–±.)</p>
    </div>
</div>
</body>
</html>