<?php
declare(strict_types=1);

/**
 * –ö–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–µ–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–æ–º–æ—â—å—é SplDoublyLinkedList
 */
class OperationStack {
    private $stack;
    private $operationLog;
    
    public function __construct() {
        $this->stack = new SplDoublyLinkedList();
        $this->operationLog = [];
        $this->logOperation("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", "–°—Ç–µ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ–∑–¥–∞–Ω");
    }
    
    /**
     * –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —Å—Ç–µ–∫
     */
    public function push(string $operation): void {
        $this->stack->push($operation);
        $this->logOperation("PUSH", "–î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è: '{$operation}'");
    }
    
    /**
     * –ò–∑–≤–ª–µ—á—å –æ–ø–µ—Ä–∞—Ü–∏—é –∏–∑ —Å—Ç–µ–∫–∞
     */
    public function pop(): ?string {
        if ($this->stack->isEmpty()) {
            $this->logOperation("POP", "–ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ –ø—É—Å—Ç–æ–≥–æ —Å—Ç–µ–∫–∞", "warning");
            return null;
        }
        
        $operation = $this->stack->pop();
        $this->logOperation("POP", "–ò–∑–≤–ª–µ—á–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è: '{$operation}'", "success");
        return $operation;
    }
    
    /**
     * –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ—Ä—Ö–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –±–µ–∑ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
     */
    public function peek(): ?string {
        if ($this->stack->isEmpty()) {
            return null;
        }
        return $this->stack->top();
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—É—Å—Ç –ª–∏ —Å—Ç–µ–∫
     */
    public function isEmpty(): bool {
        return $this->stack->isEmpty();
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Å—Ç–µ–∫–µ
     */
    public function getAllOperations(): array {
        $operations = [];
        $this->stack->rewind();
        while ($this->stack->valid()) {
            $operations[] = $this->stack->current();
            $this->stack->next();
        }
        return $operations;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Å—Ç–µ–∫–µ
     */
    public function count(): int {
        return $this->stack->count();
    }
    
    /**
     * –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–µ–∫
     */
    public function clear(): void {
        $countBefore = $this->count();
        $this->stack = new SplDoublyLinkedList();
        $this->logOperation("CLEAR", "–°—Ç–µ–∫ –æ—á–∏—â–µ–Ω (—É–¥–∞–ª–µ–Ω–æ {$countBefore} –æ–ø–µ—Ä–∞—Ü–∏–π)", "danger");
    }
    
    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
     */
    private function logOperation(string $type, string $message, string $status = "info"): void {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if (!is_array($this->operationLog)) {
            $this->operationLog = [];
        }
        
        $this->operationLog[] = [
            'timestamp' => date('H:i:s'),
            'type' => $type,
            'message' => $message,
            'status' => $status
        ];
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ª–æ–≥ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 50 –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
        if (count($this->operationLog) > 50) {
            array_shift($this->operationLog);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π
     */
    public function getOperationLog(): array {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if (!is_array($this->operationLog)) {
            $this->operationLog = [];
        }
        return $this->operationLog;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    public function getStats(): array {
        return [
            'total_operations' => count($this->getOperationLog()),
            'stack_size' => $this->count(),
            'is_empty' => $this->isEmpty(),
            'top_operation' => $this->peek()
        ];
    }
    
    /**
     * –ú–∞–≥–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
     */
    public function __wakeup() {
        // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø–æ—Å–ª–µ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if (!is_array($this->operationLog)) {
            $this->operationLog = [];
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–µ–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
if (session_status() === PHP_SESSION_NONE) {
    session_start();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–µ–∫, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–µ—Å—Å–∏–∏
if (!isset($_SESSION['operation_stack'])) {
    $_SESSION['operation_stack'] = new OperationStack();
}

$stack = $_SESSION['operation_stack'];

// –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Å—Ç–µ–∫ –≤—Å–µ–≥–¥–∞ –≤ –≤–∞–ª–∏–¥–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
if (!($stack instanceof OperationStack)) {
    $_SESSION['operation_stack'] = new OperationStack();
    $stack = $_SESSION['operation_stack'];
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º
$message = '';
$messageType = '';

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    if (isset($_POST['push_operation'])) {
        $operation = trim($_POST['operation']);
        if (!empty($operation)) {
            $stack->push($operation);
            $message = "–û–ø–µ—Ä–∞—Ü–∏—è '{$operation}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å—Ç–µ–∫";
            $messageType = 'success';
        } else {
            $message = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏";
            $messageType = 'warning';
        }
    }
    elseif (isset($_POST['pop_operation'])) {
        $popped = $stack->pop();
        if ($popped !== null) {
            $message = "–û–ø–µ—Ä–∞—Ü–∏—è '{$popped}' –∏–∑–≤–ª–µ—á–µ–Ω–∞ –∏–∑ —Å—Ç–µ–∫–∞";
            $messageType = 'success';
        } else {
            $message = "–°—Ç–µ–∫ –ø—É—Å—Ç - –Ω–µ—á–µ–≥–æ –∏–∑–≤–ª–µ–∫–∞—Ç—å";
            $messageType = 'warning';
        }
    }
    elseif (isset($_POST['clear_stack'])) {
        $stack->clear();
        $message = "–°—Ç–µ–∫ –æ—á–∏—â–µ–Ω";
        $messageType = 'danger';
    }
    elseif (isset($_POST['add_sample_operations'])) {
        $sampleOperations = [
            "–°–ª–æ–∂–µ–Ω–∏–µ —á–∏—Å–µ–ª",
            "–£–º–Ω–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü", 
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π",
            "–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞",
            "–ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
            "–û—Ç–ø—Ä–∞–≤–∫–∞ email",
            "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö",
            "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"
        ];
        
        foreach ($sampleOperations as $operation) {
            $stack->push($operation);
        }
        $message = "–î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∏–º–µ—Ä—ã –æ–ø–µ—Ä–∞—Ü–∏–π";
        $messageType = 'success';
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
$operations = $stack->getAllOperations();
$operationLog = $stack->getOperationLog();
$stats = $stack->getStats();
?>

<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ó–∞–¥–∞–Ω–∏–µ 2 - –°—Ç–µ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π</title>
    <link rel="stylesheet" href="css/style.css">
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Ññ2</h1>
            <p>–ó–∞–¥–∞–Ω–∏–µ 2 - –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–µ–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π (LIFO)</p>
        </div>

        <div class="task-description">
            <h2>üìã –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è</h2>
            <p>–°–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞—Ç—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Å—Ç–µ–∫–µ (LIFO - Last In, First Out) —Å –ø–æ–º–æ—â—å—é SplDoublyLinkedList. 
               –°—Ç–µ–∫ - —ç—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –≤ –∫–æ—Ç–æ—Ä–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º.</p>
        </div>

        <?php if ($message): ?>
            <div class="log-item <?= $messageType ?>" style="margin-bottom: 20px;">
                <span><?= htmlspecialchars($message) ?></span>
                <span class="log-time"><?= date('H:i:s') ?></span>
            </div>
        <?php endif; ?>

        <div class="controls-grid">
            <!-- –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ -->
            <div class="control-card">
                <h3>‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é</h3>
                <form method="POST">
                    <div class="form-group">
                        <label for="operation">–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</label>
                        <input type="text" id="operation" name="operation" 
                               placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏..." required>
                    </div>
                    <button type="submit" name="push_operation" class="btn">
                        üì• –î–æ–±–∞–≤–∏—Ç—å –≤ —Å—Ç–µ–∫
                    </button>
                </form>
            </div>

            <!-- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–∫–æ–º -->
            <div class="control-card">
                <h3>‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–∫–æ–º</h3>
                <form method="POST" style="display: grid; gap: 10px;">
                    <button type="submit" name="pop_operation" class="btn btn-warning" 
                            <?= $stack->isEmpty() ? 'disabled' : '' ?>>
                        üì§ –ò–∑–≤–ª–µ—á—å –æ–ø–µ—Ä–∞—Ü–∏—é (POP)
                    </button>
                    
                    <button type="submit" name="add_sample_operations" class="btn btn-success">
                        üéØ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –æ–ø–µ—Ä–∞—Ü–∏–π
                    </button>
                    
                    <button type="submit" name="clear_stack" class="btn btn-danger" 
                            <?= $stack->isEmpty() ? 'disabled' : '' ?>>
                        üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–µ–∫
                    </button>
                </form>
            </div>
        </div>

        <!-- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–µ–∫–∞ -->
        <div class="operations-display">
            <h3>üèóÔ∏è –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–µ–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π (LIFO)</h3>
            
            <div class="stack-visualization">
                <?php if (!$stack->isEmpty()): ?>
                    <?php foreach (array_reverse($operations) as $index => $operation): ?>
                        <div class="stack-item">
                            <?= htmlspecialchars($operation) ?>
                            <div style="font-size: 0.8em; opacity: 0.8; margin-top: 5px;">
                                –ü–æ–∑–∏—Ü–∏—è: <?= count($operations) - $index ?>
                            </div>
                        </div>
                    <?php endforeach; ?>
                    <div class="stack-base"></div>
                <?php else: ?>
                    <div class="empty-stack">
                        üì≠ –°—Ç–µ–∫ –ø—É—Å—Ç<br>
                        <small>–î–æ–±–∞–≤—å—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Ö –∑–¥–µ—Å—å</small>
                    </div>
                <?php endif; ?>
            </div>

            <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-value"><?= $stats['stack_size'] ?></div>
                    <div class="stat-label">–û–ø–µ—Ä–∞—Ü–∏–π –≤ —Å—Ç–µ–∫–µ</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value"><?= $stats['total_operations'] ?></div>
                    <div class="stat-label">–í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">
                        <?= $stats['is_empty'] ? '–î–∞' : '–ù–µ—Ç' ?>
                    </div>
                    <div class="stat-label">–°—Ç–µ–∫ –ø—É—Å—Ç</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">
                        <?= $stats['top_operation'] ? '‚úÖ' : '‚ùå' ?>
                    </div>
                    <div class="stat-label">–í–µ—Ä—Ö–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç</div>
                </div>
            </div>

            <!-- –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ -->
            <?php if (!$stack->isEmpty()): ?>
            <div class="recent-operations">
                <h4>üìã –û–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Å—Ç–µ–∫–µ (—Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑):</h4>
                <div class="operations-list">
                    <?php foreach (array_reverse($operations) as $operation): ?>
                        <div class="operation-tag">
                            <?= htmlspecialchars($operation) ?>
                        </div>
                    <?php endforeach; ?>
                </div>
            </div>
            <?php endif; ?>
        </div>

        <!-- –õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π -->
        <div class="operations-display">
            <h3>üìù –ñ—É—Ä–Ω–∞–ª –æ–ø–µ—Ä–∞—Ü–∏–π</h3>
            <div class="operations-log">
                <?php if (!empty($operationLog)): ?>
                    <?php foreach (array_reverse($operationLog) as $log): ?>
                        <div class="log-item <?= $log['status'] ?>">
                            <div>
                                <strong>[<?= $log['type'] ?>]</strong> 
                                <?= htmlspecialchars($log['message']) ?>
                            </div>
                            <span class="log-time"><?= $log['timestamp'] ?></span>
                        </div>
                    <?php endforeach; ?>
                <?php else: ?>
                    <div class="empty-stack" style="padding: 20px;">
                        –ñ—É—Ä–Ω–∞–ª –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç
                    </div>
                <?php endif; ?>
            </div>
        </div>

        <div style="text-align: center; margin-top: 30px; color: #666; font-size: 0.9em;">
            <p>–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø–æ –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–º —è–∑—ã–∫–∞–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è</p>
            <p>–í–∞—Ä–∏–∞–Ω—Ç 8 - –ó–∞–¥–∞–Ω–∏–µ 2 | SplDoublyLinkedList | LIFO</p>
        </div>
    </div>
</body>
</html>